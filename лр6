"""
Задание состоит из двух частей.
1 часть – написать программу в соответствии со своим вариантом задания. 
Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
2 часть – усложнить написанную программу, введя по своему усмотрению в условие 
минимум одно ограничение на характеристики объектов (которое будет сокращать количество переборов) 
и целевую функцию для нахождения оптимального решения.
вариант 26: Вводятся К целых чисел. Составьте все возможные различные правильные дроби из этих чисел
Целевая функция: нахождение дроби с наименьшим числовым значением, 
учитывая ограничение на знаменатель (меньше введенного числа)
"""

import itertools
import time

# Алгоритмический способ
def generate_fractions_algorithmic(numbers):
    fractions = []
    n = len(numbers)
    for i in range(n):
        for j in range(n):
            if i != j and numbers[i] < numbers[j]:
                numerator = numbers[i]
                denominator = numbers[j]
                fractions.append(f"{numerator}/{denominator}")
    return fractions

# Способ с использованием встроенных функций Python
def generate_fractions_with_python(numbers):
    fractions = []
    for p, q in itertools.permutations(numbers, 2):
        if p < q:
            fractions.append(f"{p}/{q}")
    return fractions

# Усложнение программы с ограничением (знаменатель меньше M)
def generate_fractions_with_restrictions(numbers, M):
    fractions = []
    for p, q in itertools.permutations(numbers, 2):
        if p < q and q < M:
            fractions.append(f"{p}/{q}")
    return fractions

# Целевая функция: находит дробь с наименьшим числовым значением и возвращает ее
def find_min_fraction(fractions):
    def fraction_value(fraction):
        numerator, denominator = map(int, fraction.split('/'))
        return numerator / denominator
    return min(fractions, key=fraction_value)

# Ввод данных от пользователя
numbers = list(map(int, input("Введите целые числа через пробел: ").split()))
M = int(input("Введите ограничение для знаменателя (знаменатель меньше введенного числа): "))

# Алгоритмический способ
start_time = time.time()
fractions_alg = generate_fractions_algorithmic(numbers)
end_time = time.time()
time_alg = end_time - start_time

# С использованием встроенных функций
start_time = time.time()
fractions_py = generate_fractions_with_python(numbers)
end_time = time.time()
time_py = end_time - start_time

print("Алгоритмический способ:", fractions_alg)
print(f"Время выполнения (алгоритмический): {time_alg:.8f}")
print("С использованием встроенных функций:", fractions_py)
print(f"Время выполнения (с функциями Python): {time_py:.8f}")

# Усложнение программы с ограничением и целевой функцией
start_time = time.time()
fractions_restricted = generate_fractions_with_restrictions(numbers, M)
end_time = time.time()
time_restricted = end_time - start_time
min_fraction = find_min_fraction(fractions_restricted)
print("С ограничениями и целевой функцией:", fractions_restricted)
print("Минимальная дробь:", min_fraction)
print(f"Время выполнения (с ограничениями): {time_restricted:.8f}")
