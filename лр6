"""
Задание состоит из двух частей.
1 часть – написать программу в соответствии со своим вариантом задания. 
Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
2 часть – усложнить написанную программу, введя по своему усмотрению в условие 
минимум одно ограничение на характеристики объектов (которое будет сокращать количество переборов) 
и целевую функцию для нахождения оптимального решения.
вариант 26: Вводятся К целых чисел. Составьте все возможные различные правильные дроби из этих чисел
Целевая функция:
Нахождение максимальной четной дроби среди всех правильных дробей,
у которых знаменатель является четным числом.
"""

import time

# Алгоритмический подход
def generate_fractions_algorithmic(numbers):
    fractions_set = set()

    # Генерация всех возможных правильных дробей из пар чисел
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            # Проверяем, что числитель меньше знаменателя
            if numbers[i] < numbers[j]:
                # Находим НОД чисел для сокращения дроби
                a, b = numbers[i], numbers[j]
                while b:
                    a, b = b, a % b
                gcd = a

                # Добавляем сокращённую дробь в множество
                fractions_set.add("{}/{}".format(numbers[i] // gcd, numbers[j] // gcd))

    return fractions_set

# С использованием функций Python
def generate_fractions_pythonic(numbers):
    fractions_set = set()

    # Генерация всех возможных правильных дробей из пар чисел с помощью двойного цикла
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            # Проверяем, что числитель меньше знаменателя
            if numbers[i] < numbers[j]:
                # Находим НОД чисел для сокращения дроби
                a, b = numbers[i], numbers[j]
                while b:
                    a, b = b, a % b
                gcd = a
                
                # Добавляем дробь в множество
                fractions_set.add("{}/{}".format(numbers[i] // gcd, numbers[j] // gcd))

    return fractions_set

# Функция для проверки является ли дробь четной
def is_even_fraction(fraction):
    numerator, denominator = map(int, fraction.split('/'))
    # Проверяем, является ли знаменатель четным
    return denominator % 2 == 0

# Функция для нахождения максимальной дроби среди списка
def find_max_fraction(fractions_list):
    max_fraction = None
    for fraction in fractions_list:
        if max_fraction is None or fraction > max_fraction:
            max_fraction = fraction
    return max_fraction

# Получение ввода от пользователя
K = int(input("Введите количество целых чисел: "))
numbers = [int(input("Введите число {}: ".format(i + 1))) for i in range(K)]

# Замеряем время выполнения алгоритмического подхода
start_time_algorithmic = time.time()
fractions_algorithmic = generate_fractions_algorithmic(numbers)
end_time_algorithmic = time.time()

# Замеряем время выполнения способа с использованием функций Python
start_time_pythonic = time.time()
fractions_pythonic = generate_fractions_pythonic(numbers)
end_time_pythonic = time.time()

# Вывод результатов
print("Все возможные различные правильные дроби (алгоритмический подход):", fractions_algorithmic)
print("Время выполнения алгоритмического подхода: {:.6f} секунд".format(end_time_algorithmic - start_time_algorithmic))

print("Все возможные различные правильные дроби (способ с использованием функций Python):", fractions_pythonic)
print("Время выполнения способа с использованием функций Python: {:.6f} секунд".format(end_time_pythonic - start_time_pythonic))

# Фильтруем четные дроби из множества
even_fractions = [fraction for fraction in fractions_pythonic if is_even_fraction(fraction)]

# Находим максимальную дробь среди четных
max_fraction = find_max_fraction(even_fractions)

# Выводим результаты
if even_fractions:
    print("Список дробей с четными знаменателями:")
    print(even_fractions)
    print("Максимальная дробь с четными знаменателем:")
    print(max_fraction)
else:
    print("Во введенных числах нет четных.")


