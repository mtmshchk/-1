"""
Задана рекуррентная функция. Область определения функции – натуральные числа. 
Написать программу сравнительного вычисления данной функции рекурсивно и итерационно. 
Определить границы применимости рекурсивного и итерационного подхода. 
Результаты сравнительного исследования времени вычисления представить в табличной и графической форме.
вариант 26:	F(1) = 1; Q(1) = 1; F(n) =(-1)n*(F(n–1) – Q(n–1)), Q(n) = F(n–1) + 2*Q(n–1) /(2n)!, при n >=2
"""

import time
import matplotlib.pyplot as plt

# Словарь для хранения значений факториалов
factorials = {'key': 0, 'item': 1}

# Кеш для хранения значений F и Q
cache_F = {}
cache_Q = {}

# Словарь для хранения знака чередования
cache_alternationSign = {'sign': None}

# Списки для хранения времени выполнения для графиков
timer = []
timer_rec = []

# Функция для вычисления факториала с кешированием
def factorial(n):
    if n != factorials['key']:
        if factorials['item'] is None or (n != factorials['key'] + 1 and n != factorials['key'] - 1):
            result = 1
            for i in range(1, n + 1):
                result *= i
            factorials['key'], factorials['item'] = n, result
            return factorials['item']
        else:
            if n > factorials['key']:
                factorials['key'] += 1
                factorials['item'] *= factorials['key']
            elif n < factorials['key']:
                factorials['item'] //= factorials['key']
                factorials['key'] -= 1
            return factorials['item']
    else:
        return factorials['item']

# Рекурсивная функция для вычисления F(n)
def recursive_F(n):
    if n == 1:
        return 1
    if n not in cache_F:
        # Определяем знак чередования
        cache_alternationSign['sign'] = -1 if n % 2 == 1 else 1
        # Очищаем кеш (для оптимизации памяти)
        cache_F.clear()
        # Вычисляем F(n) рекурсивно и сохраняем в кеш
        cache_F[n] = cache_alternationSign['sign'] * (recursive_F(n - 1) - recursive_Q(n - 1))
    return cache_F[n]

# Рекурсивная функция для вычисления Q(n)
def recursive_Q(n):
    if n == 1:
        return 1
    if n not in cache_Q:
        # Очищаем кеш (для оптимизации памяти)
        cache_Q.clear()
        # Вычисляем Q(n) рекурсивно и сохраняем в кеш
        cache_Q[n] = recursive_F(n - 1) + 2 * recursive_Q(n - 1) / factorial(2 * n)
    return cache_Q[n]

# Итеративная функция для вычисления F(n)
def iterative_F(n):
    if n == 1:
        return 1
    f, q = 1, 1
    for i in range(2, n + 1):
        sign = -1 if i % 2 == 1 else 1
        f, q = sign * (f - q), f + 2 * q / factorial(2 * i)
    return f

# Итеративная функция для вычисления Q(n)
def iterative_Q(n):
    if n == 1:
        return 1
    f, q = 1, 1
    for i in range(2, n + 1):
        sign = -1 if i % 2 == 1 else 1
        f, q = sign * (f - q), f + 2 * q / factorial(2 * i)
    return q

# Ввод значения n от пользователя
n = int(input('Введите натуральное число: '))
while n < 2:
    n = int(input('Введите натуральное число (min 2): '))

# Измерение времени выполнения рекурсивного подхода
start_time = time.time()
recursive_f_result = recursive_F(n)
recursive_q_result = recursive_Q(n)
recursive_time = time.time() - start_time

# Измерение времени выполнения итеративного подхода
start_time = time.time()
iterative_f_result = iterative_F(n)
iterative_q_result = iterative_Q(n)
iterative_time = time.time() - start_time

# Вывод результатов
print("Recursive F({}) = {}, time: {:.6f} seconds".format(n, recursive_f_result, recursive_time))
print("Recursive Q({}) = {}, time: {:.6f} seconds".format(n, recursive_q_result, recursive_time))
print("Iterative F({}) = {}, time: {:.6f} seconds".format(n, iterative_f_result, iterative_time))
print("Iterative Q({}) = {}, time: {:.6f} seconds".format(n, iterative_q_result, iterative_time))

# Подготовка данных для графиков
graf = list(range(1, n + 1))

# Измерение времени выполнения итеративного подхода для каждого значения n
for i in graf:
    start = time.time()
    result = iterative_F(i)
    end = time.time()
    timer.append(end - start)
    
    # Измерение времени выполнения рекурсивного подхода для каждого значения n
    start_rec = time.time()
    res = recursive_F(i)
    end_rec = time.time()
    timer_rec.append(end_rec - start_rec)

# Построение графиков времени выполнения
plt.plot(graf, timer, label='Итерационная функция.')
plt.plot(graf, timer_rec, label='Рекурсивная функция.')
plt.legend(loc=2)

plt.xlabel('Значение n')
plt.ylabel('Время выполнения (с)')
plt.show()
