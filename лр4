#26.	Формируется матрица F следующим образом: скопировать в нее А и если в С количество нулей в нечетных столбцах больше, 
#чем произведение чисел по периметру , то поменять местами  В и С симметрично, 
#иначе В и Е поменять местами несимметрично. При этом матрица А не меняется. 
#После чего если определитель матрицы А больше суммы диагональных элементов матрицы F,
#то вычисляется выражение: A-1*AT – K * F, иначе вычисляется выражение (A +G-1-F-1)*K, 
#где G-нижняя треугольная матрица, полученная из А. Выводятся по мере формирования А, F и все матричные операции последовательно.
import numpy as np
import matplotlib.pyplot as plt

def create_submatrix(size):
    return np.random.randint(-10, 11, size=(size, size))

def create_matrix_F(A, B, C, D, E):
    F = A.copy()
    count_zeros_C = np.sum(C[:, 1::2] == 0)
    perimeter_product = np.prod(np.hstack([C[0, :], C[:, -1], C[-1, ::-1], C[::-1, 0]]))

    if count_zeros_C > perimeter_product:
        F[:N, :N], F[:N, N:], F[N:, :N], F[N:, N:] = C, B, D, E
    else:
        F[:N, :N], F[:N, N:], F[N:, :N], F[N:, N:] = B, E, D, C

    return F

def plot_matrix(matrix, title):
    plt.matshow(matrix)
    plt.colorbar()
    plt.title(title)
    plt.show()

def main():
    K = int(input("Введите число K: "))
    N = int(input("Введите размер N (количество строк/столбцов матрицы): "))

    B = create_submatrix(N // 2)
    C = create_submatrix(N // 2)
    D = create_submatrix(N // 2)
    E = create_submatrix(N // 2)

    A = np.block([[B, C], [D, E]])
    print("Матрица A:")
    print(A)
    plot_matrix(A, "Матрица A")

    F = create_matrix_F(A, B, C, D, E)
    print("Матрица F:")
    print(F)
    plot_matrix(F, "Матрица F")

    det_A = np.linalg.det(A)
    sum_diagonal_F = np.trace(F)

    if det_A > sum_diagonal_F:
        result = np.linalg.inv(A) @ A.T - K * F
    else:
        G = np.tril(A)
        result = (A + np.linalg.inv(G) - np.linalg.inv(F)) * K

    print("Результат:")
    print(result)
    plot_matrix(result, "Результат")

if __name__ == "__main__":
    main()
